# Generated by Powerlevel10k configuration wizard on 2025-01-20 at 09:46 UTC.
# Format: https://github.com/romkatv/powerlevel10k/blob/master/README.md#installation-and-configuration.
# Config file for Powerlevel10k with custom icons and cloud environment support.

# Temporarily change options.
'builtin' 'local' '-a' 'p10k_config_opts'
[[ ! -o 'aliases'         ]] || p10k_config_opts+=('aliases')
[[ ! -o 'sh_glob'         ]] || p10k_config_opts+=('sh_glob')
[[ ! -o 'no_brace_expand' ]] || p10k_config_opts+=('no_brace_expand')
'builtin' 'setopt' 'no_aliases' 'no_sh_glob' 'brace_expand'

() {
  emulate -L zsh -o extended_glob

  # Unset all configuration options. This allows you to apply configuration changes without
  # restarting zsh. Edit ~/.p10k.zsh and type `source ~/.p10k.zsh`.
  unset -m '(POWERLEVEL9K_*|DEFAULT_USER)~POWERLEVEL9K_GITSTATUS_DIR'

  # Zsh >= 5.1 is required.
  autoload -Uz is-at-least && is-at-least 5.1 || return

  # The list of segments shown on the left. Fill it with the most important segments.
  typeset -g POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(
    # =========================[ Line #1 ]=========================
    os_icon                 # os identifier
    dir                     # current directory
    vcs                     # git status
    # =========================[ Line #2 ]=========================
    newline                 # \n
    prompt_char            # prompt symbol
  )

  # The list of segments shown on the right. Fill it with less important segments.
  # Right prompt on the last prompt line (where you are typing your commands) gets
  # automatically hidden when the input line reaches it. Right prompt above the
  # last prompt line gets hidden if it would overlap with left prompt.
  typeset -g POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(
    # =========================[ Line #1 ]=========================
    status                  # exit code of the last command
    command_execution_time  # duration of the last command
    background_jobs         # presence of background jobs
    direnv                  # direnv status (https://direnv.net/)
    asdf                    # asdf version manager (https://github.com/asdf-vm/asdf)
    virtualenv              # python virtual environment (https://docs.python.org/3/library/venv.html)
    nodeenv                 # node.js environment from nodeenv (https://github.com/ekalinin/nodeenv)
    node_version           # node.js version
    go_version             # go version (https://golang.org)
    rust_version           # rustc version (https://www.rust-lang.org)
    dotnet_version         # .NET version (https://dotnet.microsoft.com)
    php_version            # php version (https://www.php.net/)
    laravel_version        # laravel php framework version (https://laravel.com/)
    java_version           # java version (https://www.java.com/)
    package                # name@version from package.json (https://docs.npmjs.com/files/package.json)
    rbenv                  # ruby version from rbenv (https://github.com/rbenv/rbenv)
    rvm                    # ruby version from rvm (https://rvm.io)
    fvm                    # flutter version management (https://github.com/leoafarias/fvm)
    luaenv                 # lua version from luaenv (https://github.com/cehoffman/luaenv)
    jenv                   # java version from jenv (https://github.com/jenv/jenv)
    plenv                  # perl version from plenv (https://github.com/tokuhirom/plenv)
    phpenv                 # php version from phpenv (https://github.com/phpenv/phpenv)
    scalaenv               # scala version from scalaenv (https://github.com/scalaenv/scalaenv)
    haskell_stack          # haskell version from stack (https://haskellstack.org/)
    kubecontext            # current kubernetes context (https://kubernetes.io/)
    terraform              # terraform workspace (https://www.terraform.io)
    terraform_version      # terraform version (https://www.terraform.io)
    aws                    # aws profile (https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html)
    aws_eb_env            # aws elastic beanstalk environment (https://aws.amazon.com/elasticbeanstalk/)
    azure                  # azure account name (https://docs.microsoft.com/en-us/cli/azure)
    gcloud                 # google cloud cli account and project (https://cloud.google.com/)
    google_app_cred       # google application credentials (https://cloud.google.com/docs/authentication/production)
    toolbox                # toolbox name (https://github.com/containers/toolbox)
    context                # user@hostname
    nordvpn                # nordvpn connection status, linux only (https://nordvpn.com/)
    ranger                 # ranger shell (https://github.com/ranger/ranger)
    nnn                    # nnn shell (https://github.com/jarun/nnn)
    lf                     # lf shell (https://github.com/gokcehan/lf)
    xplr                   # xplr shell (https://github.com/sayanarijit/xplr)
    vim_shell             # vim shell indicator (:sh)
    midnight_commander     # midnight commander shell (https://midnight-commander.org/)
    nix_shell             # nix shell (https://nixos.org/nixos/nix-pills/developing-with-nix-shell.html)
    chezmoi_shell         # chezmoi shell (https://www.chezmoi.io/)
    vpn_ip                # virtual private network indicator
    load                  # CPU load
    disk_usage            # disk usage
    ram                   # free RAM
    swap                  # used swap
    todo                  # todo items (https://github.com/todotxt/todo.txt-cli)
    timewarrior           # timewarrior tracking status (https://timewarrior.net/)
    taskwarrior           # taskwarrior task count (https://taskwarrior.org/)
    time                  # current time
    # =========================[ Line #2 ]=========================
    newline               # \n
    # ip                    # ip address and bandwidth usage for a specified network interface
    # public_ip            # public IP address
    # proxy                # system-wide http/https/ftp proxy
    # battery              # internal battery
    # wifi                 # wifi speed
    # example              # example user-defined segment (see prompt_example function below)
  )

  # Defines character set used by powerlevel10k. It's best to let `p10k configure` set it for you.
  typeset -g POWERLEVEL9K_MODE=nerdfont-complete
  # When set to `moderate`, some icons will have an extra space after them. This is meant to avoid
  # icon overlap when using non-monospace fonts. When set to `none`, spaces are not added.
  typeset -g POWERLEVEL9K_ICON_PADDING=moderate

  # Basic style options that define the overall prompt look.
  typeset -g POWERLEVEL9K_BACKGROUND=                            # transparent background
  typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_GAP_CHAR=' '   # character to fill the gap between the first and second prompt lines
  typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_GAP_BACKGROUND=
  typeset -g POWERLEVEL9K_MULTILINE_NEWLINE_PROMPT_GAP_BACKGROUND=
  typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_GAP_FOREGROUND=240
  typeset -g POWERLEVEL9K_MULTILINE_NEWLINE_PROMPT_GAP_FOREGROUND=240
  typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_GAP_CHAR_BACKGROUND=
  typeset -g POWERLEVEL9K_MULTILINE_NEWLINE_PROMPT_GAP_CHAR_BACKGROUND=
  typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_GAP_CHAR_FOREGROUND=240
  typeset -g POWERLEVEL9K_MULTILINE_NEWLINE_PROMPT_GAP_CHAR_FOREGROUND=240

  # Add an empty line before each prompt except the first. This doesn't emulate the bug
  # in Pure that makes prompt drift down whenever you use the Alt-C binding from fzf or similar.
  typeset -g POWERLEVEL9K_PROMPT_ADD_NEWLINE=true

  # Magenta prompt symbol if the last command succeeded.
  typeset -g POWERLEVEL9K_PROMPT_CHAR_OK_{VIINS,VICMD,VIVIS,VIOWR}_FOREGROUND=magenta
  # Red prompt symbol if the last command failed.
  typeset -g POWERLEVEL9K_PROMPT_CHAR_ERROR_{VIINS,VICMD,VIVIS,VIOWR}_FOREGROUND=red
  # Default prompt symbol.
  typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VIINS_CONTENT_EXPANSION='❯'
  # Prompt symbol in command vi mode.
  typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VICMD_CONTENT_EXPANSION='❮'
  # Prompt symbol in visual vi mode is the same as for command mode. This is the default.
  # Ok, but you can change this if you want.
  typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VIVIS_CONTENT_EXPANSION='❯'
  # Prompt symbol in overwrite vi mode is the same as for command mode. This is the default.
  # Ok, but you can change this if you want.
  typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VIOWR_CONTENT_EXPANSION='❯'
  # No line terminator in prompt.
  typeset -g POWERLEVEL9K_PROMPT_CHAR_OVERFLOW_HIDDEN=true

  # OS identifier color.
  typeset -g POWERLEVEL9K_OS_ICON_FOREGROUND=255
  # Make the icon bold.
  typeset -g POWERLEVEL9K_OS_ICON_CONTENT_EXPANSION='${P9K_CONTENT}'

  # Directory icon color.
  typeset -g POWERLEVEL9K_DIR_FOREGROUND=31
  # Enable special styling for non-writable directories.
  typeset -g POWERLEVEL9K_DIR_SHOW_WRITABLE=true
  # Show this icon when the current directory is not writable. POWERLEVEL9K_LOCK_ICON is defined
  # below as a separate parameter to avoid color conflicts.
  typeset -g POWERLEVEL9K_DIR_CLASSES=(
    'SUDO_ALWAYS'    'red'     'LOCK_ICON' 'ALWAYS'
    'SUDO_COMMAND'   'red'     'LOCK_ICON' 'COMMAND'
    'SUDO_CRED'      'red'     'LOCK_ICON' 'CRED'
    'DEFAULT'        'blue'    'FOLDER_ICON' 'ALWAYS'
    'HOME'           'blue'    'HOME_ICON' 'ALWAYS'
    'HOME_SUBFOLDER' 'blue'    'HOME_SUB_ICON' 'ALWAYS'
    'NOT_WRITABLE'   'red'     'LOCK_ICON' 'ALWAYS'
    'ETC'            'blue'    'ETC_ICON' 'ALWAYS'
    'VAR'            'yellow'  'VAR_ICON' 'ALWAYS'
    'BIN'            'green'   'BIN_ICON' 'ALWAYS'
    'USR'            'blue'    'USR_ICON' 'ALWAYS'
    'USR_LOCAL'      'blue'    'USR_LOCAL_ICON' 'ALWAYS'
    'USR_SHARE'      'blue'    'USR_SHARE_ICON' 'ALWAYS'
    'OPT'            'blue'    'OPT_ICON' 'ALWAYS'
    'OPT_ALT'        'blue'    'OPT_ALT_ICON' 'ALWAYS'
    'SRV'            'yellow'  'SRV_ICON' 'ALWAYS'
    'EXPORT'         'yellow'  'EXPORT_ICON' 'ALWAYS'
    'EXPORT_HOME'    'yellow'  'EXPORT_HOME_ICON' 'ALWAYS'
    'WINDOWS'        'blue'    'WINDOWS_ICON' 'ALWAYS'
    'WINDOWS_OTHER'  'blue'    'WINDOWS_OTHER_ICON' 'ALWAYS'
    'GIT'            'green'   'GIT_ICON' 'ALWAYS'
    'GIT_HOME'       'green'   'GIT_HOME_ICON' 'ALWAYS'
    'GIT_ROOT'       'green'   'GIT_ROOT_ICON' 'ALWAYS'
    'GIT_ETC'        'green'   'GIT_ETC_ICON' 'ALWAYS'
    'GIT_OPT'        'green'   'GIT_OPT_ICON' 'ALWAYS'
    'GIT_USR'        'green'   'GIT_USR_ICON' 'ALWAYS'
    'GIT_USR_LOCAL'  'green'   'GIT_USR_LOCAL_ICON' 'ALWAYS'
    'GIT_SRV'        'green'   'GIT_SRV_ICON' 'ALWAYS'
    'GIT_EXPORT'     'green'   'GIT_EXPORT_ICON' 'ALWAYS'
    'GIT_EXPORT_HOME' 'green'  'GIT_EXPORT_HOME_ICON' 'ALWAYS'
    'GIT_WINDOWS'    'green'   'GIT_WINDOWS_ICON' 'ALWAYS'
    'GIT_WINDOWS_OTHER' 'green' 'GIT_WINDOWS_OTHER_ICON' 'ALWAYS'
  )

  # Icon for locked (non-writable) directories.
  typeset -g POWERLEVEL9K_LOCK_ICON=''

  # Git status icons.
  typeset -g POWERLEVEL9K_VCS_CLEAN_BACKGROUND=2
  typeset -g POWERLEVEL9K_VCS_MODIFIED_BACKGROUND=3
  typeset -g POWERLEVEL9K_VCS_UNTRACKED_BACKGROUND=2
  typeset -g POWERLEVEL9K_VCS_CONFLICTED_BACKGROUND=3
  typeset -g POWERLEVEL9K_VCS_NO_UPSTREAM_BACKGROUND=2

  # Git status formatter.
  function my_git_formatter() {
    emulate -L zsh
    if [[ -n $P9K_CONTENT ]]; then
      # If P9K_CONTENT is not empty, use it. It's either "loading" or from vcs_info (not from
      # gitstatus plugin). VCS_STATUS_* parameters are not available in this case.
      typeset -g my_git_format=$P9K_CONTENT
    else
      # Use VCS_STATUS_* parameters to get information about the git repository. In particular,
      # VCS_STATUS_HOME, VCS_STATUS_WORKTREE, and VCS_STATUS_COMMIT are always available.
      typeset -g my_git_format="${1+%B%4F}git:(${1+%1F}"
      my_git_format+=${${VCS_STATUS_COMMIT[1,8]}:-HEAD}
      if (( VCS_STATUS_NUM_STAGED || VCS_STATUS_NUM_UNSTAGED || VCS_STATUS_NUM_UNTRACKED )); then
        my_git_format+=" ${1+%1F}✗"
      fi
      if (( VCS_STATUS_NUM_STAGED )); then
        my_git_format+="${1+%2F}+${VCS_STATUS_NUM_STAGED}"
      fi
      if (( VCS_STATUS_NUM_UNSTAGED )); then
        my_git_format+="${1+%3F}~${VCS_STATUS_NUM_UNSTAGED}"
      fi
      if (( VCS_STATUS_NUM_UNTRACKED )); then
        my_git_format+="${1+%1F}+${VCS_STATUS_NUM_UNTRACKED}"
      fi
      my_git_format+="${1+%4F})"
    fi
  }
  functions -M my_git_formatter 2>/dev/null

  # Disable the default Git status formatting. All formatting in this section is done by
  # `my_git_formatter` function above.
  typeset -g POWERLEVEL9K_VCS_DISABLE_GITSTATUS_FORMATTING=true
  # Install our own Git status formatter.
  typeset -g POWERLEVEL9K_VCS_CONTENT_EXPANSION='${$((my_git_formatter(1)))+${my_git_format}}'
  # Enable counters for staged, unstaged, etc.
  typeset -g POWERLEVEL9K_VCS_{STAGED,UNSTAGED,UNTRACKED,CONFLICTED,COMMITS_AHEAD,COMMITS_BEHIND}_MAX_NUM=-1

  # Icon color.
  typeset -g POWERLEVEL9K_VCS_VISUAL_IDENTIFIER_COLOR=76
  typeset -g POWERLEVEL9K_VCS_LOADING_VISUAL_IDENTIFIER_COLOR=244
  # Custom icon.
  # typeset -g POWERLEVEL9K_VCS_VISUAL_IDENTIFIER_EXPANSION='⭐'
  # Custom prefix.
  # typeset -g POWERLEVEL9K_VCS_PREFIX='%248Fon '

  # Show status of repositories of these types. You can add svn and/or hg if you are
  # using them. If you do, your prompt may become slow even when your current directory
  # isn't in an svn or hg reposotiry.
  typeset -g POWERLEVEL9K_VCS_BACKENDS=(git)

  # These settings are used for repositories other than Git or when gitstatusd fails and
  # Powerlevel10k has to fall back to using vcs_info.
  typeset -g POWERLEVEL9K_VCS_CLEAN_FOREGROUND=76
  typeset -g POWERLEVEL9K_VCS_UNTRACKED_FOREGROUND=76
  typeset -g POWERLEVEL9K_VCS_MODIFIED_FOREGROUND=178

  # Status on success. No content, just an icon. No need to show it if prompt_char is
  # already enabled because when it is, it will indicate success by turning green.
  typeset -g POWERLEVEL9K_STATUS_OK=false
  typeset -g POWERLEVEL9K_STATUS_OK_FOREGROUND=70
  typeset -g POWERLEVEL9K_STATUS_OK_VISUAL_IDENTIFIER_EXPANSION='✔'

  # Status when some part of a pipe command fails but the overall exit status is zero.
  # It may look like this: 1|0.
  typeset -g POWERLEVEL9K_STATUS_OK_PIPE=true
  typeset -g POWERLEVEL9K_STATUS_OK_PIPE_FOREGROUND=70
  typeset -g POWERLEVEL9K_STATUS_OK_PIPE_VISUAL_IDENTIFIER_EXPANSION='✔'

  # Status when it's just an error code (e.g., '1'). No need to show it if prompt_char is
  # already enabled because when it is, it will indicate error by turning red.
  typeset -g POWERLEVEL9K_STATUS_ERROR=true
  typeset -g POWERLEVEL9K_STATUS_ERROR_FOREGROUND=160
  typeset -g POWERLEVEL9K_STATUS_ERROR_VISUAL_IDENTIFIER_EXPANSION='✘'

  # Status when the last command was terminated by a signal.
  typeset -g POWERLEVEL9K_STATUS_ERROR_SIGNAL=true
  typeset -g POWERLEVEL9K_STATUS_ERROR_SIGNAL_FOREGROUND=160
  # Use terse signal names: "INT" instead of "SIGINT(2)".
  typeset -g POWERLEVEL9K_STATUS_VERBOSE_SIGNAME=false
  typeset -g POWERLEVEL9K_STATUS_ERROR_SIGNAL_VISUAL_IDENTIFIER_EXPANSION='✘'

  # Status when some part of a pipe command fails and the overall exit status is also non-zero.
  # It may look like this: 1|0.
  typeset -g POWERLEVEL9K_STATUS_ERROR_PIPE=true
  typeset -g POWERLEVEL9K_STATUS_ERROR_PIPE_FOREGROUND=160
  typeset -g POWERLEVEL9K_STATUS_ERROR_PIPE_VISUAL_IDENTIFIER_EXPANSION='✘'

  # =========================[ Right prompt ]=========================

  # Status when running in a container of any type. Podman, Docker, etc.
  typeset -g POWERLEVEL9K_ASDF_PROMPT_ALWAYS_SHOW=false
  typeset -g POWERLEVEL9K_ASDF_SHOW_SYSTEM=true
  typeset -g POWERLEVEL9K_ASDF_SOURCES=(shell local global)
  typeset -g POWERLEVEL9K_ASDF_PYTHON_SOURCES=(shell local global)
  typeset -g POWERLEVEL9K_ASDF_NODEJS_SOURCES=(shell local global)
  typeset -g POWERLEVEL9K_ASDF_RUBY_SOURCES=(shell local global)
  typeset -g POWERLEVEL9K_ASDF_HASKELL_SOURCES=(shell local global)
  typeset -g POWERLEVEL9K_ASDF_JAVA_SOURCES=(shell local global)
  typeset -g POWERLEVEL9K_ASDF_EMACS_SOURCES=(shell local global)
  typeset -g POWERLEVEL9K_ASDF_KUBECTL_SOURCES=(shell local global)
  typeset -g POWERLEVEL9K_ASDF_KUBECTL_OVERWRITE_ALIASES=true
  typeset -g POWERLEVEL9K_ASDF_FLUTTER_SOURCES=(shell local global)
  typeset -g POWERLEVEL9K_ASDF_DART_SOURCES=(shell local global)
  typeset -g POWERLEVEL9K_ASDF_LUA_SOURCES=(shell local global)
  typeset -g POWERLEVEL9K_ASDF_TERRAFORM_SOURCES=(shell local global)
  typeset -g POWERLEVEL9K_ASDF_TERRAFORM_OVERWRITE_ALIASES=true
  typeset -g POWERLEVEL9K_ASDF_TERRAFORM_ASDF_SHOWS_LOCAL=true
  typeset -g POWERLEVEL9K_ASDF_TERRAFORM_ASDF_SHOWS_GLOBAL=false
  typeset -g POWERLEVEL9K_ASDF_TERRAFORM_ASDF_SHOWS_SYSTEM=false
  typeset -g POWERLEVEL9K_ASDF_TERRAFORM_SHOW_DEFAULT=false
  typeset -g POWERLEVEL9K_ASDF_TERRAFORM_SHOW_PREFIX=true
  typeset -g POWERLEVEL9K_ASDF_SHOW_PREFIX=true
  typeset -g POWERLEVEL9K_ASDF_SHOW_ON_UPGLOB=''

  # AWS profile.
  typeset -g POWERLEVEL9K_AWS_SHOW_ON_COMMAND='aws|awless|terraform|pulumi'
  typeset -g POWERLEVEL9K_AWS_CLASSES=(
    '*prod*'  PROD    'red'
    '*test*'  TEST    'yellow'
    '*dev*'   DEV     'green'
    '*'       DEFAULT 'blue'
  )
  typeset -g POWERLEVEL9K_AWS_EB_ENV_SHOW_ON_COMMAND='eb|terraform|pulumi'
  typeset -g POWERLEVEL9K_AWS_EB_ENV_CLASSES=(
    '*prod*'  PROD    'red'
    '*test*'  TEST    'yellow'
    '*dev*'   DEV     'green'
    '*'       DEFAULT 'blue'
  )

  # Azure account name.
  typeset -g POWERLEVEL9K_AZURE_SHOW_ON_COMMAND='az|terraform|pulumi|ngrok'
  typeset -g POWERLEVEL9K_AZURE_CLASSES=(
    '*prod*'  PROD    'red'
    '*test*'  TEST    'yellow'
    '*dev*'   DEV     'green'
    '*'       DEFAULT 'blue'
  )

  # Google Cloud CLI account and project.
  typeset -g POWERLEVEL9K_GCLOUD_SHOW_ON_COMMAND='gcloud|gcp'
  typeset -g POWERLEVEL9K_GCLOUD_CLASSES=(
    '*prod*'  PROD    'red'
    '*test*'  TEST    'yellow'
    '*dev*'   DEV     'green'
    '*'       DEFAULT 'blue'
  )

  # Kubernetes context classes for the purpose of using different colors, icons and expansions with
  # different contexts.
  #
  # POWERLEVEL9K_KUBECONTEXT_CLASSES is an array with even number of elements. The first element
  # in each pair defines a pattern against which the current kubernetes context gets matched.
  # More specifically, it's P9K_CONTENT prior to the application of context expansion (see below)
  # that gets matched. If you rematch the entire P9K_CONTENT, you'll get an error. The second
  # element of each pair defines the context class. Patterns are tried in order. The first match
  # wins.
  #
  # For example, given these settings:
  #
  #   typeset -g POWERLEVEL9K_KUBECONTEXT_CLASSES=(
  #     '*prod*'  PROD
  #     '*test*'  TEST
  #     '*'       DEFAULT
  #   )
  #
  # If your current kubernetes context is "deathray-testing", its class is TEST because "deathray-testing"
  # doesn't match the pattern '*prod*' but does match '*test*'.
  #
  # You can define different colors, icons and content expansions for different classes:
  #
  #   typeset -g POWERLEVEL9K_KUBECONTEXT_PROD_FOREGROUND=76
  #   typeset -g POWERLEVEL9K_KUBECONTEXT_TEST_FOREGROUND=70
  #   typeset -g POWERLEVEL9K_KUBECONTEXT_DEFAULT_FOREGROUND=249
  #   typeset -g POWERLEVEL9K_KUBECONTEXT_PROD_VISUAL_IDENTIFIER_EXPANSION='⭐'
  #   typeset -g POWERLEVEL9K_KUBECONTEXT_TEST_VISUAL_IDENTIFIER_EXPANSION='⚡'
  #   typeset -g POWERLEVEL9K_KUBECONTEXT_DEFAULT_VISUAL_IDENTIFIER_EXPANSION='☸️'
  #   typeset -g POWERLEVEL9K_KUBECONTEXT_PROD_CONTENT_EXPANSION='${P9K_CONTENT}'
  #   typeset -g POWERLEVEL9K_KUBECONTEXT_TEST_CONTENT_EXPANSION='${P9K_CONTENT}'
  #   typeset -g POWERLEVEL9K_KUBECONTEXT_DEFAULT_CONTENT_EXPANSION='${P9K_CONTENT}'
  #
  # Within the value, ${P9K_CONTENT} will be replaced with the actual content of the context.
  typeset -g POWERLEVEL9K_KUBECONTEXT_CLASSES=(
    # '*prod*'  PROD    # these values are examples that are unlikely
    # '*test*'  TEST    # to match your needs. customize them as needed.
    '*'       DEFAULT
  )

  # Kubernetes context colors.
  typeset -g POWERLEVEL9K_KUBECONTEXT_DEFAULT_FOREGROUND=134
  # typeset -g POWERLEVEL9K_KUBECONTEXT_PROD_FOREGROUND=76
  # typeset -g POWERLEVEL9K_KUBECONTEXT_TEST_FOREGROUND=70

  # Kubernetes context format.
  typeset -g POWERLEVEL9K_KUBECONTEXT_DEFAULT_CONTENT_EXPANSION=
  # Show P9K_KUBECONTEXT_CLOUD_CLUSTER if it's not empty and fall back to P9K_KUBECONTEXT_NAME.
  POWERLEVEL9K_KUBECONTEXT_DEFAULT_CONTENT_EXPANSION+='${P9K_KUBECONTEXT_CLOUD_CLUSTER:-${P9K_KUBECONTEXT_NAME}}'
  # Append the current context's namespace if it's not "default".
  POWERLEVEL9K_KUBECONTEXT_DEFAULT_CONTENT_EXPANSION+='${${:-/$P9K_KUBECONTEXT_NAMESPACE}:#/default}'

  # Custom prefix.
  # typeset -g POWERLEVEL9K_KUBECONTEXT_PREFIX='%248Fat '

  # Show current time.
  typeset -g POWERLEVEL9K_TIME_FOREGROUND=66
  typeset -g POWERLEVEL9K_TIME_BACKGROUND=0
  # Format for the current time: 09:51:02. See `man 3 strftime`.
  typeset -g POWERLEVEL9K_TIME_FORMAT='%D{%H:%M:%S}'
  # If set to true, time will update when you hit enter. This way prompts for the previous
  # command will have the correct time.
  typeset -g POWERLEVEL9K_TIME_UPDATE_ON_COMMAND=true
  # Custom icon.
  typeset -g POWERLEVEL9K_TIME_VISUAL_IDENTIFIER_EXPANSION=
  # Custom prefix.
  # typeset -g POWERLEVEL9K_TIME_PREFIX='%248Fat '

  # Example of a user-defined prompt segment. Function will be called with no arguments
  # and should output nothing. The content of the segment is the output of the function.
  function prompt_example() {
    p10k segment -f red -t 'hello, %n'
  }

  # User-defined prompt segments may optionally provide an instant_prompt_* function.
  # Its job is to perform the same computation as the regular prompt_* function but
  # instantaneously, without waiting for external commands to complete. If you don't
  # need to instantiate some of your prompt segments to avoid blocking, you can
  # remove the instant_prompt_* function.
  #
  # Your prompt_* function is called during normal rendering of the prompt. If you
  # use it for e.g. syntax highlighting, you'll want to also define instant_prompt_*.
  # However, if you only need a simple static string, you can skip instant_prompt_*
  # and just override P9K_PROMPT in instant_prompt_*.

  # User-defined prompt segments can be customized the same way as built-in segments.
  # typeset -g POWERLEVEL9K_EXAMPLE_FOREGROUND=208
  # typeset -g POWERLEVEL9K_EXAMPLE_VISUAL_IDENTIFIER_EXPANSION='⭐'

  # Transient prompt works similarly to the builtin transient_rprompt option. It trims down prompt
  # when accepting a command line. Supported values:
  #
  #   - off:      Don't change prompt when accepting a command line.
  #   - always:   Trim down prompt when accepting a command line.
  #   - same-dir: Trim down prompt when accepting a command line unless this is the first
  #               command typed after changing current directory.
  typeset -g POWERLEVEL9K_TRANSIENT_PROMPT=off

  # Instant prompt mode.
  #
  #   - off:     Disable instant prompt. Choose this if you've tried instant prompt and found
  #              it incompatible with your zsh configuration files.
  #   - quiet:   Enable instant prompt and don't print warnings when detecting console output
  #              during zsh initialization. Choose this if you've read and understood
  #              https://github.com/romkatv/powerlevel10k/blob/master/README.md#instant-prompt.
  #   - verbose: Enable instant prompt and print a warning when detecting console output during
  #              zsh initialization. Choose this if you've never tried instant prompt, haven't
  #              seen the warning, or if you are unsure what this all means.
  typeset -g POWERLEVEL9K_INSTANT_PROMPT=quiet

  # Hot reload allows you to change POWERLEVEL9K options after Powerlevel10k has been initialized.
  # For example, you can type POWERLEVEL9K_BACKGROUND=red and see your prompt turn red. Hot
  # reload can slow down prompt by 1-2 milliseconds, so it's better to keep it turned off.
  typeset -g POWERLEVEL9K_DISABLE_HOT_RELOAD=true

  # If p10k is already loaded, reload configuration.
  # This works even with POWERLEVEL9K_DISABLE_HOT_RELOAD=true.
  (( ! $+functions[p10k] )) || p10k reload
}

# Tell `p10k configure` which file it should overwrite.
typeset -g POWERLEVEL9K_CONFIG_FILE=${${(%):-%x}:a}

(( ${#p10k_config_opts} )) && setopt ${p10k_config_opts[@]}
'builtin' 'unset' 'p10k_config_opts' 