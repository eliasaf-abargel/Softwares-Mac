# =============================================================================
# ðŸš€ Advanced ZSH Configuration
# =============================================================================
# 
# A comprehensive, production-ready ZSH configuration designed for modern
# cloud-native development workflows. This setup provides an enhanced terminal
# experience with integrated support for AWS, GCP, Azure, Docker, Kubernetes,
# and more.
#
# Features:
# - Powerlevel10k theme with instant prompt
# - Cloud development tools integration
# - Container and orchestration support
# - Enhanced productivity features
# - Smart project detection and setup
# - Professional development workflow
#
# Author: Advanced ZSH Configuration Suite
# Version: 2.0.0
# =============================================================================

# =============================================================================
# POWERLEVEL10K INSTANT PROMPT
# =============================================================================
# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# This enables instant prompt for faster startup times.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# =============================================================================
# ENVIRONMENT VARIABLES
# =============================================================================

# Basic environment configuration
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export EDITOR='nvim'
export VISUAL='nvim'
export PAGER='less'

# History configuration for better command management
export HISTSIZE=10000
export SAVEHIST=10000
export HISTFILE=~/.zsh_history
setopt SHARE_HISTORY
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_VERIFY

# Path configuration using array for better management
typeset -U path PATH
path=(
  /usr/local/bin
  /opt/homebrew/bin
  $HOME/.local/bin
  $HOME/.cargo/bin
  $HOME/.npm-global/bin
  $path
)

# =============================================================================
# OH-MY-ZSH CONFIGURATION
# =============================================================================

# Path to your oh-my-zsh installation
export ZSH="$HOME/.oh-my-zsh"

# Theme configuration
ZSH_THEME="powerlevel10k/powerlevel10k"

# Advanced plugins for cloud development and productivity
plugins=(
  # Core functionality
  git
  zsh-syntax-highlighting
  zsh-autosuggestions
  history
  history-substring-search
  
  # Container and orchestration
  docker
  docker-compose
  kubectl
  kubectx
  
  # Cloud development
  aws
  gcloud
  terraform
  helm
  
  # Development tools
  node
  npm
  python
  pip
  virtualenv
  poetry
  rust
  golang
  
  # System and utilities
  extract
  fzf
  z
  copypath
  dirhistory
  sudo
  web-search
  jsontools
  brew
  macos
)

# Load Oh My Zsh
source $ZSH/oh-my-zsh.sh

# =============================================================================
# CLOUD ENVIRONMENT CONFIGURATION
# =============================================================================

# AWS Configuration
export AWS_DEFAULT_REGION=us-east-1
export AWS_PAGER=""

# AWS CLI v2 completion
if command -v aws &> /dev/null; then
  complete -C aws_completer aws
fi

# GCP Configuration
if [[ -f "$HOME/.config/gcloud/application_default_credentials.json" ]]; then
  export GOOGLE_APPLICATION_CREDENTIALS="$HOME/.config/gcloud/application_default_credentials.json"
fi

# GCP SDK (Homebrew installation)
if [ -f "/opt/homebrew/share/google-cloud-sdk/path.zsh.inc" ]; then
  source "/opt/homebrew/share/google-cloud-sdk/path.zsh.inc"
fi

if [ -f "/opt/homebrew/share/google-cloud-sdk/completion.zsh.inc" ]; then
  source "/opt/homebrew/share/google-cloud-sdk/completion.zsh.inc"
fi

# Azure CLI completion
if command -v az &> /dev/null; then
  autoload -U +X bashcompinit && bashcompinit
  source ~/.azure/completion.zsh 2>/dev/null || true
fi

# =============================================================================
# ALIASES
# =============================================================================

# Editor aliases
alias vim="nvim"
alias vi="nvim"
alias v="nvim"
alias code="code-insiders" 2>/dev/null || alias code="code"

# System navigation aliases
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'

# Git workflow aliases
alias gs='git status'
alias ga='git add'
alias gc='git commit'
alias gp='git push'
alias gl='git log --oneline'
alias gb='git branch'
alias gco='git checkout'
alias gcb='git checkout -b'
alias gbd='git branch -d'
alias gpl='git pull'
alias gf='git fetch'
alias gd='git diff'
alias gdc='git diff --cached'

# Docker management aliases
alias d='docker'
alias dc='docker-compose'
alias dps='docker ps'
alias dpsa='docker ps -a'
alias dex='docker exec -it'
alias dlogs='docker logs -f'
alias dstop='docker stop $(docker ps -q)'
alias dclean='docker system prune -f'
alias dcleanall='docker system prune -a -f'
alias dimg='docker images'
alias drm='docker rm $(docker ps -aq)'

# Kubernetes workflow aliases
alias k='kubectl'
alias kg='kubectl get'
alias kd='kubectl describe'
alias kl='kubectl logs -f'
alias kx='kubectx'
alias kn='kubens'
alias kp='kubectl get pods'
alias ks='kubectl get services'
alias ki='kubectl get ingress'
alias kns='kubectl get namespaces'
alias kdp='kubectl delete pod'
alias kds='kubectl delete service'

# Cloud provider aliases
alias aws='aws'
alias gcp='gcloud'
alias az='az'

# Terraform workflow aliases
alias tf='terraform'
alias tfi='terraform init'
alias tfp='terraform plan'
alias tfa='terraform apply'
alias tfd='terraform destroy'
alias tfo='terraform output'
alias tfs='terraform state'

# Development language aliases
alias py='python3'
alias pip='pip3'
alias node='node'
alias npm='npm'
alias yarn='yarn'
alias go='go'
alias rust='rustc'
alias cargo='cargo'

# Enhanced file listing aliases
alias ls='eza'
alias ll='eza -la'
alias la='eza -A'
alias l='eza -CF'

# =============================================================================
# FUNCTIONS
# =============================================================================

# Create directory and navigate to it
mkcd() {
  mkdir -p "$1" && cd "$1"
}

# Search in command history
hist() {
  history | grep "$1"
}

# Extract various archive formats
extract() {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1     ;;
      *.tar.gz)    tar xzf $1     ;;
      *.bz2)       bunzip2 $1     ;;
      *.rar)       unrar e $1     ;;
      *.gz)        gunzip $1      ;;
      *.tar)       tar xf $1      ;;
      *.tbz2)      tar xjf $1     ;;
      *.tgz)       tar xzf $1     ;;
      *.zip)       unzip $1       ;;
      *.Z)         uncompress $1  ;;
      *.7z)        7z x $1        ;;
      *)     echo "'$1' cannot be extracted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# Smart commit function with automatic message generation
smartcommit() {
  local message=$1
  if [[ -z $message ]]; then
    message="$(date '+%Y-%m-%d %H:%M:%S') - $(git status --porcelain | head -1 | cut -c4-)"
  fi
  git add .
  git commit -m "$message"
}

# Smart push function with upstream tracking
smartpush() {
  local branch=$(git branch --show-current)
  git push -u origin $branch
}

# Cloud environment switching function
switch-env() {
  case $1 in
    "aws-dev")
      export AWS_PROFILE=dev
      export AWS_DEFAULT_REGION=us-east-1
      echo "Switched to AWS DEV environment"
      ;;
    "aws-prod")
      export AWS_PROFILE=prod
      export AWS_DEFAULT_REGION=us-west-2
      echo "Switched to AWS PROD environment"
      ;;
    "gcp-dev")
      gcloud config set project dev-project-id
      echo "Switched to GCP DEV environment"
      ;;
    "gcp-prod")
      gcloud config set project prod-project-id
      echo "Switched to GCP PROD environment"
      ;;
    "azure-dev")
      az account set --subscription dev-subscription-id
      echo "Switched to Azure DEV environment"
      ;;
    "azure-prod")
      az account set --subscription prod-subscription-id
      echo "Switched to Azure PROD environment"
      ;;
    *)
      echo "Usage: switch-env [aws-dev|aws-prod|gcp-dev|gcp-prod|azure-dev|azure-prod]"
      ;;
  esac
}

# Smart project detection and setup
project() {
  if [[ -f "package.json" ]]; then
    echo "Node.js project detected"
    npm install
    npm run dev
  elif [[ -f "docker-compose.yml" ]]; then
    echo "Docker project detected"
    docker-compose up -d
  elif [[ -f "requirements.txt" ]]; then
    echo "Python project detected"
    python -m venv venv
    source venv/bin/activate
    pip install -r requirements.txt
  elif [[ -f "Cargo.toml" ]]; then
    echo "Rust project detected"
    cargo build
  elif [[ -f "go.mod" ]]; then
    echo "Go project detected"
    go mod tidy
    go run .
  fi
}

# Quick cloud resource listing
cloud-resources() {
  case $1 in
    "aws")
      echo "=== AWS Resources ==="
      aws ec2 describe-instances --query 'Reservations[*].Instances[*].[InstanceId,State.Name,InstanceType,PublicIpAddress]' --output table
      ;;
    "gcp")
      echo "=== GCP Resources ==="
      gcloud compute instances list
      ;;
    "azure")
      echo "=== Azure Resources ==="
      az vm list --output table
      ;;
    *)
      echo "Usage: cloud-resources [aws|gcp|azure]"
      ;;
  esac
}

# Kubernetes context information display
kctx() {
  echo "Current context: $(kubectl config current-context)"
  echo "Current namespace: $(kubectl config view --minify --output 'jsonpath={..namespace}')"
  echo "Available contexts:"
  kubectl config get-contexts
}

# Docker container management
dmanage() {
  case $1 in
    "start")
      docker-compose up -d
      ;;
    "stop")
      docker-compose down
      ;;
    "restart")
      docker-compose restart
      ;;
    "logs")
      docker-compose logs -f
      ;;
    *)
      echo "Usage: dmanage [start|stop|restart|logs]"
      ;;
  esac
}

# =============================================================================
# COMPLETIONS
# =============================================================================

# Initialize completions
autoload -Uz compinit
compinit

# Custom completions directory
fpath=(~/.zsh/completions $fpath)

# Terraform completion
if command -v terraform &> /dev/null; then
  autoload -U +X bashcompinit && bashcompinit
  complete -o nospace -C /opt/homebrew/bin/terraform terraform
fi

# Helm completion
if command -v helm &> /dev/null; then
  source <(helm completion zsh)
fi

# =============================================================================
# KEY BINDINGS
# =============================================================================

# History search bindings
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down

# Word navigation bindings
bindkey '^[[1;5C' forward-word
bindkey '^[[1;5D' backward-word

# FZF integration configuration
if command -v fzf &> /dev/null; then
  export FZF_DEFAULT_OPTS="--height 40% --layout=reverse --border --preview 'bat --style=numbers --color=always --line-range :500 {}'"
  export FZF_DEFAULT_COMMAND="fd --type f"
  export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
fi

# =============================================================================
# TOOL-SPECIFIC CONFIGURATIONS
# =============================================================================

# Homebrew shell environment
eval "$(/opt/homebrew/bin/brew shellenv)"

# GitHub Copilot CLI integration
if command -v gh &> /dev/null; then
  alias copilot="gh copilot"
  alias gcs="gh copilot suggest"
  alias gce="gh copilot explain"
fi

# Node Version Manager (nvm) configuration
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

# Python virtual environments
export VIRTUAL_ENV_DISABLE_PROMPT=1

# Rust environment
export PATH="$HOME/.cargo/bin:$PATH"

# Go environment
export GOPATH="$HOME/go"
export PATH="$GOPATH/bin:$PATH"

# =============================================================================
# CUSTOM DIRECTORY HASHES
# =============================================================================

# Quick navigation to common directories
hash -d projects=~/Projects
hash -d downloads=~/Downloads
hash -d documents=~/Documents
hash -d desktop=~/Desktop
hash -d config=~/.config

# =============================================================================
# FINAL SETUP
# =============================================================================

# Load Powerlevel10k configuration
if [[ -f ~/.p10k.zsh ]]; then
  source ~/.p10k.zsh
fi

# Load any additional custom configurations
if [ -d ~/.zshrc.d ]; then
  for file in ~/.zshrc.d/*.zsh; do
    if [ -f "$file" ]; then
      source "$file"
    fi
  done
fi

# Welcome message disabled for instant prompt compatibility
# Uncomment the lines below if you want to see welcome messages when running source ~/.zshrc
# if [[ -z $P9K_INSTANT_PROMPT ]]; then
#   echo "ðŸš€ Advanced ZSH configuration loaded!"
#   echo "ðŸ“¦ Available tools: AWS, GCP, Azure, Docker, Kubernetes, Terraform"
#   echo "ðŸ’¡ Use 'switch-env' to change cloud environments"
#   echo "ðŸ”§ Use 'project' to auto-detect and setup projects"
# fi